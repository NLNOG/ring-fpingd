#!/usr/bin/perl

# ringfpingd - regularly fping all ring participants, report results to graphite service

use strict;
use warnings;
use threads qw(yield);
use threads::shared;

use Data::Dumper;
use Getopt::Long;
use IO::Socket::INET;
use POSIX;
use Sys::Hostname;

# User settings

my $myname	 = 'ringfping';						# My own name
my $server	 = 'graphite.convergence.cx';				# Graphite Server
my $maxthreads   = 4;							# Maximum number of threads (excluding boss)
my $pinginterval = 10;							# Interval in seconds between pings
my $hostinterval = 60*60;						# Interval in seconds to re-read the hosts file (1 hr)

# No more user settable stuff, here be dragons!

my $cleanexit = 0; 							# Global clean exit switch

my $port = 2003;							# Graphite plaintext port

my $hostname = hostname(); $hostname=~s/\.ring.*//g;			# /etc/hostname is overqualified

my ($debug, $foreground, $help, $maxworkitems, $verbose);
my (@resultlist, @threadpool, @worklist);

GetOptions ("f|foreground" => \$foreground, "h|help" => \$help, "v|verbose" => \$verbose);

if ($help) {
	print "$0:\n\t-f = foreground only\n\t-v = verbose (foreground only)";
	exit;
}

if ($verbose) {								# Verbose mode means debugging, if not foregrounded, send to STDERR
	unless ($foreground) {
		select (STDERR);					# Change default select target to STDERR
	}
	$debug = 1;							# Switch on debugging messages
}

### MAIN ###

# Register global SIGHUP handler using POSIX , this makes us play nicely with the OS, upon SIGHUP we call our boss key
my $sigset = POSIX::SigSet->new();
my $action = POSIX::SigAction->new('bosskey', $sigset, &POSIX::SA_NODEFER);
POSIX::sigaction(&POSIX::SIGHUP, $action);

# Share some things
share($cleanexit);
share(@worklist);
share($maxworkitems);

# Become a daemon if we are asked to
&daemonize unless ($foreground);

# Open our socket#

# Create our boss
my $boss = threads->create('boss');
push (@threadpool, $boss);

# Create our workers
foreach (1..$maxthreads) {
	push (@threadpool, threads->create('worker'));
}

# Join our threadpool (i.e wait for the threads to terminate before continuing)
foreach (@threadpool) {
	$_->join();
}

# That's the end
exit;

### SUBROUTINES ###

sub daemonize {								# Daemonize

	# Set our starting name	
	$0 = $myname;

	# Get our running name
	my $runname = $myname . 'd';

	# check if our daemon is actually running	

	unless (system("ps -e | grep >/dev/null $runname")) {
		die "Can't daemonize, another copy appears to be running";
	}

	# Fork and exit parent. Makes sure we are not a process group leader.
	my $pid = fork;
	exit 0 if $pid;
	exit 1 if not defined $pid;

	# Become leader of a new session, group leader of new
	# process group and detach from any terminal.
	setsid();
	$pid = fork;
	exit 0 if $pid;
	exit 1 if not defined $pid;

	# We are a daemon now!
	$0 = $runname;

}

sub cleanexit {								# Make a clean exit and take the threads with us
	print "Exiting threads cleanly...\n" if ($debug);
	$cleanexit = 1;
	sleep 1;
	exit;
}

sub read_hosts {							# Generate hostmap database
	my $fh;
	lock(@worklist);
	@worklist = ();							# Initialise worklist
	open ($fh, "< /home/claranet/hosts")  || die "Can't open /etc/hosts $!";
	HOST:
	while (<$fh>) {
		chomp;
		next HOST if ($_=~m/infra/);
		if ($_=~m/^(\S+)\s+(\S+)\s+/) {
			my ($ip, $host) = ($1, $2);
			next HOST if ($host eq $hostname);		# Ignore ourselves
			$host .= (($ip=~m/:/) ? '_v6' : '_v4');		# AFIise the hostname
			push (@worklist, shared_clone({$ip => $host}));	# Add workent
		}
	}
	close ($fh);

	$maxworkitems = ceil(($#worklist + 1) / $maxthreads);		# Work out from the worklist size, how many items each thread should have

	return;
}

sub worker {								# Actual worker thread

	my @workitems;
	my $self = threads->self();
	my $tid = threads->tid();
	my $socket = new IO::Socket::INET(PeerHost=>$server, PeerPort=>$port, Proto=>'udp') || die("TID = $tid, error in Socket Creation : $!\n");

	$SIG{'USR1'} = sub {						# Inline sub for when the boss calls, it can access our internals
			print "TID = $tid, reloading our worklist...\n" if ($debug);
			@workitems = ();
			lock(@worklist);
			foreach (1..$maxworkitems) {
				my $newworkitem = pop(@worklist);
				push (@workitems, $newworkitem) if ($newworkitem);
			}
	};

	$self->kill('USR1');							# Kick ourselves up the backside and grab our worklist before we start


	while(!$cleanexit){							# Main thread runloop

		foreach (@workitems) {
			foreach my $ip (keys %{$_}) {
				my $host  = $_->{$ip};
				my $afi   = ($ip=~m/:/) ? 'ipv6' : 'ipv4';
				my $fpingcmd = ($afi eq 'ipv6') ? 'fping6' : 'fping';
				my $fping = `$fpingcmd 2>&1 -q -c 1 $ip`; chomp($fping);
				my ($xmt, $rcv, $los, $min, $avg, $max);
				if ($fping=~m# : xmt/rcv/%loss = (\d+)/(\d+)/(\d+)%#) {
					($xmt, $rcv, $los) = ($1, $2, $3);
				}
				if ($fping=~m#min/avg/max = ([^\/]+)/([^\/]+)/([^\/]+)#) {
					($min, $avg, $max) = ($1, $2, $3);
				}
				else {
					($min, $avg, $max) = (0, 0, 0,);
				}

				# Build dispatch to graphite
				my $dispatch_hostname 	= ($afi eq 'ipv6') ? "${hostname}_v6" : "${hostname}_v4";
				my $dispatch_time 	= time;
				my $dispatch_prefix 	= "ping.$dispatch_hostname.$host";
				my $dispatch_str 	= ''
							. "$dispatch_prefix.packetloss $los $dispatch_time\n"
							. "$dispatch_prefix.minrtt $min $dispatch_time\n"
							. "$dispatch_prefix.avgrtt $avg $dispatch_time\n"
							. "$dispatch_prefix.maxrtt $max $dispatch_time\n";
				print $dispatch_str if ($debug);
				print $socket $dispatch_str;
			}
		}
		yield();
		sleep $pinginterval;
	}

	close($socket);

}

sub boss {								# Boss thread

	$SIG{'USR1'} = undef;						# The boss doesn't yield to SIGUSR1

	while(!$cleanexit){
		&bosskey;						# Calls the boss key each time it runs
		yield();
		sleep $hostinterval;					# And then has a snooze
	}
}

sub bosskey {								# The boss key is used by the boss to ask the workers to get new work
		&read_hosts;
		foreach my $thread (@threadpool) {			# Send SIGUSR1 to the threadpool members
			$thread->kill('USR1') if ($thread);
		}
}
